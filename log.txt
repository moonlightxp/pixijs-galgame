# 项目实现功能记录

## 已实现的核心系统
1. 场景系统 (scenes.js)
   - StartScene: 仅显示背景和开始按钮
   - DialogScene: 支持背景、BGM、多角色立绘、对话文本、语音
   - SelectScene: 支持场景选择、角色选择、场景描述、角色描述
   - 场景间可通过 nextScene 属性切换

2. 资源管理系统 (managers.js - AssetManager)
   - 启动时预加载所有资源（背景、立绘、音乐、语音）
   - 使用 Map 缓存已加载资源
   - 显示加载进度（0-100%）
   - 支持资源的加载和释放

3. 音频系统 (managers.js - AudioManager)
   - 支持 BGM/语音/音效 三种类型
   - 处理浏览器的自动播放限制
   - 实现音频资源的预加载和缓存
   - 确保音频切换时正确释放资源

4. 显示系统 (managers.js - DisplayManager)
   - 管理背景和立绘的显示/切换
   - 支持角色立绘位置（左/中/右）
   - 实现角色立绘明暗效果（说话时高亮）
   - 处理显示层级关系

5. UI系统 (managers.js - UIManager)
   - 实现对话框和文本显示
   - 实现选择按钮（场景/角色选择）
   - 实现加载进度界面
   - 支持响应式布局（等比缩放）
   - 支持触摸和鼠标事件

## 项目结构
- assets/: 资源文件（背景、立绘、音乐、语音）
- src/
  - index.js: 游戏引擎入口
  - config.js: 全局配置（路径、状态等）
  - gameData.js: 游戏内容数据
  - managers.js: 核心管理器实现
  - scenes.js: 场景系统实现
  - styles.js: UI样式配置

## 开发规范记录

1. 代码规范
   - 使用半角符号
   - 代码嵌套不超过两层
   - 类型和变量命名必须明确表达用途
   - 关键功能必须添加注释
   - 每个类必须有类注释
   - 每个公开方法必须有方法注释

2. 错误处理规范
   - 所有异步操作必须使用 try-catch
   - 资源加载失败必须记录日志
   - 音频播放失败不能影响游戏流程
   - UI操作失败必须有降级处理

3. 性能规范
   - 必须预加载所有资源
   - 必须缓存已加载的资源
   - 切换场景时必须释放不需要的资源
   - 音频切换时必须正确释放旧资源

4. 浏览器兼容规范
   - 必须处理音频自动播放限制
   - 必须支持触摸和鼠标事件
   - 必须支持不同屏幕尺寸
   - 必须处理资源加载超时

5. 版本控制规范
   - commit 必须说明改动内容
   - 构建前必须先本地测试
   - 上传前必须清理多余文件
   - 保持 docs 目录结构正确

## 注意事项
1. 音频系统
   - 第一次播放可能会报错，但不影响功能
   - 音频切换时需要适当延迟
   - 必须使用 cloneNode 避免冲突

2. 资源管理
   - 构建时注意 assets 目录结构
   - 避免重复的资源文件
   - 使用文件哈希控制缓存

3. UI系统
   - 按钮尺寸已针对移动设备优化
   - 对话框支持点击/触摸翻页
   - 选择按钮布局已固定