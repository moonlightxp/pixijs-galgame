/**
 * 核心管理类
 */
class SceneManager      // 场景管理：负责场景切换和场景类型处理
class ContentManager    // 内容管理：负责内容流程和进度控制
class AssetManager     // 资源管理：统一管理所有资源（图片、音频等）的加载和缓存

/**
 * 表现层管理类
 */
class DisplayManager   // 显示管理：负责视觉元素（背景、角色等）的显示和更新
class AudioManager    // 音频管理：负责所有音频（BGM、语音）的播放和控制
class UIManager       // 界面管理：负责所有UI元素（对话框、按钮等）的显示和交互


/**
 * 重构分步计划
 */

=== 第一阶段：资源管理整合 ===
1. 创建 AssetManager
   [>] - 创建基础结构
   [ ] - 移动现有的资源缓存逻辑
   [ ] - 添加统一的资源加载接口

2. 迁移资源加载
   [ ] - 从 DialogScene 迁移资源加载逻辑
   [ ] - 从 StartScene 迁移资源加载逻辑
   [ ] - 调整其他类中的资源加载调用

=== 第二阶段：显示管理整合 ===
1. 创建 DisplayManager
   [ ] - 创建基础结构
   [ ] - 从 DialogScene 迁移显示相关方法
   [ ] - 添加统一的显示管理接口

2. 迁移显示逻辑
   [ ] - 迁移背景显示逻辑
   [ ] - 迁移角色显示逻辑
   [ ] - 迁移效果设置逻辑

=== 第三阶段：音频管理优化 ===
1. 重构 AudioManager
   [ ] - 基于现有 MusicManager 重构
   [ ] - 添加音频类型区分
   [ ] - 统一音频管理接口

2. 迁移音频逻辑
   [ ] - 迁移背景音乐逻辑
   [ ] - 添加语音支持
   [ ] - 调整相关调用

=== 第四阶段：内容流程优化 ===
1. 重构 ContentManager
   [ ] - 简化职责范围
   [ ] - 优化内容流程控制
   [ ] - 调整与其他管理器的交互

2. 优化场景管理
   [ ] - 简化 SceneManager
   [ ] - 优化场景切换逻辑
   [ ] - 调整场景处理器

=== 第五阶段：UI 管理优化 ===
1. 重构 UIManager
   [ ] - 聚焦 UI 元素管理
   [ ] - 优化 UI 创建和更新逻辑
   [ ] - 简化与其他管理器的交互

/**
 * 注意事项
 */
1. 每个步骤都要确保：
   - 先创建新的类/方法
   - 进行单元测试
   - 逐步迁移现有功能
   - 确保功能正常后再进行下一步

2. 避免过度设计：
   - 只在必要时才进行拆分
   - 保持代码结构清晰简单
   - 为后续扩展预留空间

/**
 * 状态标记说明
 */
[ ] - 未开始
[>] - 进行中
[x] - 已完成